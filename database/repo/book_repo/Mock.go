// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package book_repo

import (
	"sync"
	"yellowroad_library/database/entities"
	"yellowroad_library/utils/app_error"
)

var (
	lockBookRepositoryMockDelete   sync.RWMutex
	lockBookRepositoryMockFindById sync.RWMutex
	lockBookRepositoryMockInsert   sync.RWMutex
	lockBookRepositoryMockPaginate sync.RWMutex
	lockBookRepositoryMockUpdate   sync.RWMutex
)

// BookRepositoryMock is a mock implementation of BookRepository.
//
//     func TestSomethingThatUsesBookRepository(t *testing.T) {
//
//         // make and configure a mocked BookRepository
//         mockedBookRepository := &BookRepositoryMock{
//             DeleteFunc: func(in1 *entities.Book) app_error.AppError {
// 	               panic("TODO: mock out the Delete method")
//             },
//             FindByIdFunc: func(id int, associations []string) (entities.Book, app_error.AppError) {
// 	               panic("TODO: mock out the FindById method")
//             },
//             InsertFunc: func(in1 *entities.Book) app_error.AppError {
// 	               panic("TODO: mock out the Insert method")
//             },
//             PaginateFunc: func(startpage int, perpage int, options SearchOptions) ([]entities.Book, app_error.AppError) {
// 	               panic("TODO: mock out the Paginate method")
//             },
//             UpdateFunc: func(in1 *entities.Book) app_error.AppError {
// 	               panic("TODO: mock out the Update method")
//             },
//         }
//
//         // TODO: use mockedBookRepository in code that requires BookRepository
//         //       and then make assertions.
//
//     }
type BookRepositoryMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(in1 *entities.Book) app_error.AppError

	// FindByIdFunc mocks the FindById method.
	FindByIdFunc func(id int, associations []string) (entities.Book, app_error.AppError)

	// InsertFunc mocks the Insert method.
	InsertFunc func(in1 *entities.Book) app_error.AppError

	// PaginateFunc mocks the Paginate method.
	PaginateFunc func(startpage int, perpage int, options SearchOptions) ([]entities.Book, app_error.AppError)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *entities.Book) app_error.AppError

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// In1 is the in1 argument value.
			In1 *entities.Book
		}
		// FindById holds details about calls to the FindById method.
		FindById []struct {
			// Id is the id argument value.
			Id int
			// Associations is the associations argument value.
			Associations []string
		}
		// Insert holds details about calls to the Insert method.
		Insert []struct {
			// In1 is the in1 argument value.
			In1 *entities.Book
		}
		// Paginate holds details about calls to the Paginate method.
		Paginate []struct {
			// Startpage is the startpage argument value.
			Startpage int
			// Perpage is the perpage argument value.
			Perpage int
			// Options is the options argument value.
			Options SearchOptions
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *entities.Book
		}
	}
}

// Delete calls DeleteFunc.
func (mock *BookRepositoryMock) Delete(in1 *entities.Book) app_error.AppError {
	if mock.DeleteFunc == nil {
		panic("moq: BookRepositoryMock.DeleteFunc is nil but BookRepository.Delete was just called")
	}
	callInfo := struct {
		In1 *entities.Book
	}{
		In1: in1,
	}
	lockBookRepositoryMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockBookRepositoryMockDelete.Unlock()
	return mock.DeleteFunc(in1)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedBookRepository.DeleteCalls())
func (mock *BookRepositoryMock) DeleteCalls() []struct {
	In1 *entities.Book
} {
	var calls []struct {
		In1 *entities.Book
	}
	lockBookRepositoryMockDelete.RLock()
	calls = mock.calls.Delete
	lockBookRepositoryMockDelete.RUnlock()
	return calls
}

// FindById calls FindByIdFunc.
func (mock *BookRepositoryMock) FindById(id int, associations []string) (entities.Book, app_error.AppError) {
	if mock.FindByIdFunc == nil {
		panic("moq: BookRepositoryMock.FindByIdFunc is nil but BookRepository.FindById was just called")
	}
	callInfo := struct {
		Id           int
		Associations []string
	}{
		Id:           id,
		Associations: associations,
	}
	lockBookRepositoryMockFindById.Lock()
	mock.calls.FindById = append(mock.calls.FindById, callInfo)
	lockBookRepositoryMockFindById.Unlock()
	return mock.FindByIdFunc(id, associations)
}

// FindByIdCalls gets all the calls that were made to FindById.
// Check the length with:
//     len(mockedBookRepository.FindByIdCalls())
func (mock *BookRepositoryMock) FindByIdCalls() []struct {
	Id           int
	Associations []string
} {
	var calls []struct {
		Id           int
		Associations []string
	}
	lockBookRepositoryMockFindById.RLock()
	calls = mock.calls.FindById
	lockBookRepositoryMockFindById.RUnlock()
	return calls
}

// Insert calls InsertFunc.
func (mock *BookRepositoryMock) Insert(in1 *entities.Book) app_error.AppError {
	if mock.InsertFunc == nil {
		panic("moq: BookRepositoryMock.InsertFunc is nil but BookRepository.Insert was just called")
	}
	callInfo := struct {
		In1 *entities.Book
	}{
		In1: in1,
	}
	lockBookRepositoryMockInsert.Lock()
	mock.calls.Insert = append(mock.calls.Insert, callInfo)
	lockBookRepositoryMockInsert.Unlock()
	return mock.InsertFunc(in1)
}

// InsertCalls gets all the calls that were made to Insert.
// Check the length with:
//     len(mockedBookRepository.InsertCalls())
func (mock *BookRepositoryMock) InsertCalls() []struct {
	In1 *entities.Book
} {
	var calls []struct {
		In1 *entities.Book
	}
	lockBookRepositoryMockInsert.RLock()
	calls = mock.calls.Insert
	lockBookRepositoryMockInsert.RUnlock()
	return calls
}

// Paginate calls PaginateFunc.
func (mock *BookRepositoryMock) Paginate(startpage int, perpage int, options SearchOptions) ([]entities.Book, app_error.AppError) {
	if mock.PaginateFunc == nil {
		panic("moq: BookRepositoryMock.PaginateFunc is nil but BookRepository.Paginate was just called")
	}
	callInfo := struct {
		Startpage int
		Perpage   int
		Options   SearchOptions
	}{
		Startpage: startpage,
		Perpage:   perpage,
		Options:   options,
	}
	lockBookRepositoryMockPaginate.Lock()
	mock.calls.Paginate = append(mock.calls.Paginate, callInfo)
	lockBookRepositoryMockPaginate.Unlock()
	return mock.PaginateFunc(startpage, perpage, options)
}

// PaginateCalls gets all the calls that were made to Paginate.
// Check the length with:
//     len(mockedBookRepository.PaginateCalls())
func (mock *BookRepositoryMock) PaginateCalls() []struct {
	Startpage int
	Perpage   int
	Options   SearchOptions
} {
	var calls []struct {
		Startpage int
		Perpage   int
		Options   SearchOptions
	}
	lockBookRepositoryMockPaginate.RLock()
	calls = mock.calls.Paginate
	lockBookRepositoryMockPaginate.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *BookRepositoryMock) Update(in1 *entities.Book) app_error.AppError {
	if mock.UpdateFunc == nil {
		panic("moq: BookRepositoryMock.UpdateFunc is nil but BookRepository.Update was just called")
	}
	callInfo := struct {
		In1 *entities.Book
	}{
		In1: in1,
	}
	lockBookRepositoryMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockBookRepositoryMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedBookRepository.UpdateCalls())
func (mock *BookRepositoryMock) UpdateCalls() []struct {
	In1 *entities.Book
} {
	var calls []struct {
		In1 *entities.Book
	}
	lockBookRepositoryMockUpdate.RLock()
	calls = mock.calls.Update
	lockBookRepositoryMockUpdate.RUnlock()
	return calls
}
