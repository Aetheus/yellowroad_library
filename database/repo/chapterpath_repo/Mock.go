// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package chapterpath_repo

import (
	"sync"
	"yellowroad_library/database/entities"
	"yellowroad_library/utils/app_error"
)

var (
	lockChapterPathRepositoryMockDelete           sync.RWMutex
	lockChapterPathRepositoryMockFindByChapterIds sync.RWMutex
	lockChapterPathRepositoryMockFindById         sync.RWMutex
	lockChapterPathRepositoryMockInsert           sync.RWMutex
	lockChapterPathRepositoryMockUpdate           sync.RWMutex
)

// ChapterPathRepositoryMock is a mock implementation of ChapterPathRepository.
//
//     func TestSomethingThatUsesChapterPathRepository(t *testing.T) {
//
//         // make and configure a mocked ChapterPathRepository
//         mockedChapterPathRepository := &ChapterPathRepositoryMock{
//             DeleteFunc: func(in1 *entities.ChapterPath) app_error.AppError {
// 	               panic("TODO: mock out the Delete method")
//             },
//             FindByChapterIdsFunc: func(fromChapterId int, toChapterId int) (entities.ChapterPath, app_error.AppError) {
// 	               panic("TODO: mock out the FindByChapterIds method")
//             },
//             FindByIdFunc: func(chapterId int) (entities.ChapterPath, app_error.AppError) {
// 	               panic("TODO: mock out the FindById method")
//             },
//             InsertFunc: func(in1 *entities.ChapterPath) app_error.AppError {
// 	               panic("TODO: mock out the Insert method")
//             },
//             UpdateFunc: func(in1 *entities.ChapterPath) app_error.AppError {
// 	               panic("TODO: mock out the Update method")
//             },
//         }
//
//         // TODO: use mockedChapterPathRepository in code that requires ChapterPathRepository
//         //       and then make assertions.
//
//     }
type ChapterPathRepositoryMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(in1 *entities.ChapterPath) app_error.AppError

	// FindByChapterIdsFunc mocks the FindByChapterIds method.
	FindByChapterIdsFunc func(fromChapterId int, toChapterId int) (entities.ChapterPath, app_error.AppError)

	// FindByIdFunc mocks the FindById method.
	FindByIdFunc func(chapterId int) (entities.ChapterPath, app_error.AppError)

	// InsertFunc mocks the Insert method.
	InsertFunc func(in1 *entities.ChapterPath) app_error.AppError

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *entities.ChapterPath) app_error.AppError

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// In1 is the in1 argument value.
			In1 *entities.ChapterPath
		}
		// FindByChapterIds holds details about calls to the FindByChapterIds method.
		FindByChapterIds []struct {
			// FromChapterId is the fromChapterId argument value.
			FromChapterId int
			// ToChapterId is the toChapterId argument value.
			ToChapterId int
		}
		// FindById holds details about calls to the FindById method.
		FindById []struct {
			// ChapterId is the chapterId argument value.
			ChapterId int
		}
		// Insert holds details about calls to the Insert method.
		Insert []struct {
			// In1 is the in1 argument value.
			In1 *entities.ChapterPath
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *entities.ChapterPath
		}
	}
}

// Delete calls DeleteFunc.
func (mock *ChapterPathRepositoryMock) Delete(in1 *entities.ChapterPath) app_error.AppError {
	if mock.DeleteFunc == nil {
		panic("moq: ChapterPathRepositoryMock.DeleteFunc is nil but ChapterPathRepository.Delete was just called")
	}
	callInfo := struct {
		In1 *entities.ChapterPath
	}{
		In1: in1,
	}
	lockChapterPathRepositoryMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockChapterPathRepositoryMockDelete.Unlock()
	return mock.DeleteFunc(in1)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedChapterPathRepository.DeleteCalls())
func (mock *ChapterPathRepositoryMock) DeleteCalls() []struct {
	In1 *entities.ChapterPath
} {
	var calls []struct {
		In1 *entities.ChapterPath
	}
	lockChapterPathRepositoryMockDelete.RLock()
	calls = mock.calls.Delete
	lockChapterPathRepositoryMockDelete.RUnlock()
	return calls
}

// FindByChapterIds calls FindByChapterIdsFunc.
func (mock *ChapterPathRepositoryMock) FindByChapterIds(fromChapterId int, toChapterId int) (entities.ChapterPath, app_error.AppError) {
	if mock.FindByChapterIdsFunc == nil {
		panic("moq: ChapterPathRepositoryMock.FindByChapterIdsFunc is nil but ChapterPathRepository.FindByChapterIds was just called")
	}
	callInfo := struct {
		FromChapterId int
		ToChapterId   int
	}{
		FromChapterId: fromChapterId,
		ToChapterId:   toChapterId,
	}
	lockChapterPathRepositoryMockFindByChapterIds.Lock()
	mock.calls.FindByChapterIds = append(mock.calls.FindByChapterIds, callInfo)
	lockChapterPathRepositoryMockFindByChapterIds.Unlock()
	return mock.FindByChapterIdsFunc(fromChapterId, toChapterId)
}

// FindByChapterIdsCalls gets all the calls that were made to FindByChapterIds.
// Check the length with:
//     len(mockedChapterPathRepository.FindByChapterIdsCalls())
func (mock *ChapterPathRepositoryMock) FindByChapterIdsCalls() []struct {
	FromChapterId int
	ToChapterId   int
} {
	var calls []struct {
		FromChapterId int
		ToChapterId   int
	}
	lockChapterPathRepositoryMockFindByChapterIds.RLock()
	calls = mock.calls.FindByChapterIds
	lockChapterPathRepositoryMockFindByChapterIds.RUnlock()
	return calls
}

// FindById calls FindByIdFunc.
func (mock *ChapterPathRepositoryMock) FindById(chapterId int) (entities.ChapterPath, app_error.AppError) {
	if mock.FindByIdFunc == nil {
		panic("moq: ChapterPathRepositoryMock.FindByIdFunc is nil but ChapterPathRepository.FindById was just called")
	}
	callInfo := struct {
		ChapterId int
	}{
		ChapterId: chapterId,
	}
	lockChapterPathRepositoryMockFindById.Lock()
	mock.calls.FindById = append(mock.calls.FindById, callInfo)
	lockChapterPathRepositoryMockFindById.Unlock()
	return mock.FindByIdFunc(chapterId)
}

// FindByIdCalls gets all the calls that were made to FindById.
// Check the length with:
//     len(mockedChapterPathRepository.FindByIdCalls())
func (mock *ChapterPathRepositoryMock) FindByIdCalls() []struct {
	ChapterId int
} {
	var calls []struct {
		ChapterId int
	}
	lockChapterPathRepositoryMockFindById.RLock()
	calls = mock.calls.FindById
	lockChapterPathRepositoryMockFindById.RUnlock()
	return calls
}

// Insert calls InsertFunc.
func (mock *ChapterPathRepositoryMock) Insert(in1 *entities.ChapterPath) app_error.AppError {
	if mock.InsertFunc == nil {
		panic("moq: ChapterPathRepositoryMock.InsertFunc is nil but ChapterPathRepository.Insert was just called")
	}
	callInfo := struct {
		In1 *entities.ChapterPath
	}{
		In1: in1,
	}
	lockChapterPathRepositoryMockInsert.Lock()
	mock.calls.Insert = append(mock.calls.Insert, callInfo)
	lockChapterPathRepositoryMockInsert.Unlock()
	return mock.InsertFunc(in1)
}

// InsertCalls gets all the calls that were made to Insert.
// Check the length with:
//     len(mockedChapterPathRepository.InsertCalls())
func (mock *ChapterPathRepositoryMock) InsertCalls() []struct {
	In1 *entities.ChapterPath
} {
	var calls []struct {
		In1 *entities.ChapterPath
	}
	lockChapterPathRepositoryMockInsert.RLock()
	calls = mock.calls.Insert
	lockChapterPathRepositoryMockInsert.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ChapterPathRepositoryMock) Update(in1 *entities.ChapterPath) app_error.AppError {
	if mock.UpdateFunc == nil {
		panic("moq: ChapterPathRepositoryMock.UpdateFunc is nil but ChapterPathRepository.Update was just called")
	}
	callInfo := struct {
		In1 *entities.ChapterPath
	}{
		In1: in1,
	}
	lockChapterPathRepositoryMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockChapterPathRepositoryMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedChapterPathRepository.UpdateCalls())
func (mock *ChapterPathRepositoryMock) UpdateCalls() []struct {
	In1 *entities.ChapterPath
} {
	var calls []struct {
		In1 *entities.ChapterPath
	}
	lockChapterPathRepositoryMockUpdate.RLock()
	calls = mock.calls.Update
	lockChapterPathRepositoryMockUpdate.RUnlock()
	return calls
}
